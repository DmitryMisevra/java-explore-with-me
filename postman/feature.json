{
	"info": {
		"_postman_id": "0b247904-b06a-4e11-b929-2ca3fd377a4d",
		"name": "Sprint 17 Ewm (feature_comments)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add category 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" должен быть равен 123').to.eql(123);",
							"});",
							"",
							"pm.test(\"Проверка поля 'name'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" должен быть \"Test category 1\"').to.eql(\"Test category 1\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Test category 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "add User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" должен быть равен 138').to.eql(138);",
							"});",
							"",
							"pm.test(\"Проверка поля 'name'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" должен быть \"Test Name 1\"').to.eql(\"Test Name 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'email'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData.email, '\"email\" должен быть \"test1@test.ru\"').to.eql(\"test1@test.ru\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test1@test.ru\",\n  \"name\": \"Test Name 1\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" должен быть равен 139').to.eql(139);",
							"});",
							"",
							"pm.test(\"Проверка поля 'name'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" должен быть \"Test Name 2\"').to.eql(\"Test Name 2\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'email'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData.email, '\"email\" должен быть \"test2@test.ru\"').to.eql(\"test2@test.ru\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"test2@test.ru\",\n  \"name\": \"Test Name 2\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add Event 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'annotation'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('annotation', \"Test annotation test annotation 1\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'category'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.be.an('object');",
							"    pm.expect(jsonData.category).to.have.property('id', 123);",
							"    pm.expect(jsonData.category).to.have.property('name', \"Test category 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'confirmedRequests'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('confirmedRequests', 0);",
							"});",
							"",
							"pm.test(\"Проверка поля 'createdOn'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('createdOn');",
							"});",
							"",
							"pm.test(\"Проверка поля 'description'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description', \"Test description test description 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventDate'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventDate', \"2024-12-31 15:10:05\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 107);",
							"});",
							"",
							"pm.test(\"Проверка объекта 'initiator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('initiator');",
							"    pm.expect(jsonData.initiator).to.be.an('object');",
							"    pm.expect(jsonData.initiator).to.have.property('id', 138);",
							"    pm.expect(jsonData.initiator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.initiator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'location'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('location');",
							"    pm.expect(jsonData.location).to.be.an('object');",
							"    pm.expect(jsonData.location).to.have.property('lat', 55.754166);",
							"    pm.expect(jsonData.location).to.have.property('lon', 37.62);",
							"});",
							"",
							"pm.test(\"Проверка поля 'paid'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('paid', true);",
							"});",
							"",
							"pm.test(\"Проверка поля 'participantLimit'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('participantLimit', 10);",
							"});",
							"",
							"pm.test(\"Проверка поля 'publishedOn'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('publishedOn', null);",
							"});",
							"",
							"pm.test(\"Проверка поля 'requestModeration'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('requestModeration', true);",
							"});",
							"",
							"pm.test(\"Проверка поля 'title'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('title', \"Test title 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'state'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('state', \"PENDING\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'views'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('views', 0);",
							"});",
							"",
							"pm.test(\"Проверка поля 'comments'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('comments');",
							"    pm.expect(jsonData.comments).to.be.an('array').that.is.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"annotation\": \"Test annotation test annotation 1\",\n  \"category\": 123,\n  \"description\": \"Test description test description 1\",\n  \"eventDate\": \"2024-12-31 15:10:05\",\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"requestModeration\": true,\n  \"title\": \"Test title 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add Event 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'annotation'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('annotation', \"Test annotation test annotation 2\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'category'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.be.an('object');",
							"    pm.expect(jsonData.category).to.have.property('id', 123);",
							"    pm.expect(jsonData.category).to.have.property('name', \"Test category 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'confirmedRequests'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('confirmedRequests', 0);",
							"});",
							"",
							"pm.test(\"Проверка поля 'createdOn'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('createdOn');",
							"});",
							"",
							"pm.test(\"Проверка поля 'description'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description', \"Test description test description 2\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventDate'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventDate', \"2024-10-06 15:10:05\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 108);",
							"});",
							"",
							"pm.test(\"Проверка объекта 'initiator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('initiator');",
							"    pm.expect(jsonData.initiator).to.be.an('object');",
							"    pm.expect(jsonData.initiator).to.have.property('id', 138);",
							"    pm.expect(jsonData.initiator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.initiator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'location'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('location');",
							"    pm.expect(jsonData.location).to.be.an('object');",
							"    pm.expect(jsonData.location).to.have.property('lat', 56.754166);",
							"    pm.expect(jsonData.location).to.have.property('lon', 38.62);",
							"});",
							"",
							"pm.test(\"Проверка поля 'paid'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('paid', false);",
							"});",
							"",
							"pm.test(\"Проверка поля 'participantLimit'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('participantLimit', 15);",
							"});",
							"",
							"pm.test(\"Проверка поля 'publishedOn'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('publishedOn', null);",
							"});",
							"",
							"pm.test(\"Проверка поля 'requestModeration'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('requestModeration', true);",
							"});",
							"",
							"pm.test(\"Проверка поля 'title'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('title', \"Test title 2\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'state'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('state', \"PENDING\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'views'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('views', 0);",
							"});",
							"",
							"pm.test(\"Проверка поля 'comments'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('comments');",
							"    pm.expect(jsonData.comments).to.be.an('array').that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"annotation\": \"Test annotation test annotation 2\",\n  \"category\": 123,\n  \"description\": \"Test description test description 2\",\n  \"eventDate\": \"2024-10-06 15:10:05\",\n  \"location\": {\n    \"lat\": 56.754167,\n    \"lon\": 38.62\n  },\n  \"paid\": false,\n  \"participantLimit\": 15,\n  \"requestModeration\": true,\n  \"title\": \"Test title 2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update Event 1 by Admin publish correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'state'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('state', \"PUBLISHED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create comment to event 1 invalid creator not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"test сomment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1000"
						},
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create comment to event 1 invalid event not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"test сomment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "eventId",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create comment to event 2 invalid event unpublished",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"test сomment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "eventId",
							"value": "108"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create comment to event 1 invalid text over 7000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatumm\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create comment 1 to event 1 correct text within 7000 characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 1);",
							"});",
							"",
							"pm.test(\"Проверка поля 'text'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text');",
							"    pm.expect(jsonData.text.startsWith(\"Lorem ipsum dolor sit amet\")).to.be.true;",
							"    pm.expect(jsonData.text.endsWith(\"dignissim qui blandit praesent luptatum\")).to.be.true;",
							"});",
							"",
							"pm.test(\"Проверка объекта 'creator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('creator').that.is.an('object');",
							"    pm.expect(jsonData.creator).to.have.property('id', 138);",
							"    pm.expect(jsonData.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.creator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventId'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId', 107);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create comment 2 to event 1 correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 2);",
							"});",
							"",
							"pm.test(\"Проверка поля 'text'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text', \"test сomment 2\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'creator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('creator').that.is.an('object');",
							"    pm.expect(jsonData.creator).to.have.property('id', 138);",
							"    pm.expect(jsonData.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.creator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventId'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId', 107);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"test сomment 2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update comment to event 1 invalid comment not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"updated сomment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "commentId",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update comment to event 1 invalid user is not creator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"updated сomment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "139"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update comment 1 to event 1 correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 1);",
							"});",
							"",
							"pm.test(\"Проверка поля 'text'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text', \"updated сomment\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'creator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('creator').that.is.an('object');",
							"    pm.expect(jsonData.creator).to.have.property('id', 138);",
							"    pm.expect(jsonData.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.creator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventId'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId', 107);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"updated сomment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment by user invalid user is not creator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "139"
						},
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment 1 by creator correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment 1 by user invalid comment is not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "commentId",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment 1 by admin invalid comment is not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete comment 2 by admin correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create comment 3 to event 1 correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 3);",
							"});",
							"",
							"pm.test(\"Проверка поля 'text'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text', \"test сomment 3\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'creator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('creator').that.is.an('object');",
							"    pm.expect(jsonData.creator).to.have.property('id', 138);",
							"    pm.expect(jsonData.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.creator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventId'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId', 107);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"test сomment 3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create comment 4 to event 1 correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 4);",
							"});",
							"",
							"pm.test(\"Проверка поля 'text'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('text', \"test сomment 4\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'creator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('creator').that.is.an('object');",
							"    pm.expect(jsonData.creator).to.have.property('id', 138);",
							"    pm.expect(jsonData.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.creator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventId'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventId', 107);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"test сomment 4\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get Event 1 full info with comments by initiator correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'annotation'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('annotation', \"Test annotation test annotation 1\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'category'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.be.an('object');",
							"    pm.expect(jsonData.category).to.have.property('id', 123);",
							"    pm.expect(jsonData.category).to.have.property('name', \"Test category 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'confirmedRequests'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('confirmedRequests', 0);",
							"});",
							"",
							"pm.test(\"Проверка поля 'createdOn'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('createdOn');",
							"});",
							"",
							"pm.test(\"Проверка поля 'description'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description', \"Test description test description 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventDate'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventDate', \"2024-12-31 15:10:05\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 107);",
							"});",
							"",
							"pm.test(\"Проверка объекта 'initiator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('initiator');",
							"    pm.expect(jsonData.initiator).to.be.an('object');",
							"    pm.expect(jsonData.initiator).to.have.property('id', 138);",
							"    pm.expect(jsonData.initiator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.initiator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'location'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('location');",
							"    pm.expect(jsonData.location).to.be.an('object');",
							"    pm.expect(jsonData.location).to.have.property('lat', 55.754166);",
							"    pm.expect(jsonData.location).to.have.property('lon', 37.62);",
							"});",
							"",
							"pm.test(\"Проверка поля 'paid'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('paid', true);",
							"});",
							"",
							"pm.test(\"Проверка поля 'participantLimit'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('participantLimit', 10);",
							"});",
							"",
							"pm.test(\"Проверка поля 'publishedOn'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('publishedOn', null);",
							"});",
							"",
							"pm.test(\"Проверка поля 'requestModeration'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('requestModeration', true);",
							"});",
							"",
							"pm.test(\"Проверка поля 'title'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('title', \"Test title 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'state'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('state', \"PUBLISHED\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'views'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('views', 0);",
							"});",
							"",
							"pm.test(\"Проверка поля 'comments'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('comments');",
							"    pm.expect(jsonData).to.have.property('comments').that.is.an('array');",
							"",
							"    var secondComment = jsonData.comments[0];",
							"    pm.expect(secondComment).to.have.property('id', 4);",
							"    pm.expect(secondComment).to.have.property('text', \"test сomment 4\");",
							"    pm.expect(secondComment.creator).to.have.property('id', 138);",
							"    pm.expect(secondComment.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(secondComment.creator).to.have.property('email', \"test1@test.ru\");",
							"    pm.expect(secondComment).to.have.property('eventId', 107);",
							"",
							"    var firstComment = jsonData.comments[1];",
							"    pm.expect(firstComment).to.have.property('id', 3);",
							"    pm.expect(firstComment).to.have.property('text', \"test сomment 3\");",
							"    pm.expect(firstComment.creator).to.have.property('id', 138);",
							"    pm.expect(firstComment.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(firstComment.creator).to.have.property('email', \"test1@test.ru\");",
							"    pm.expect(firstComment).to.have.property('eventId', 107);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "138"
						},
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get Event 1 public full info with comments correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка поля 'annotation'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('annotation', \"Test annotation test annotation 1\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'category'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.be.an('object');",
							"    pm.expect(jsonData.category).to.have.property('id', 123);",
							"    pm.expect(jsonData.category).to.have.property('name', \"Test category 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'confirmedRequests'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('confirmedRequests', 0);",
							"});",
							"",
							"pm.test(\"Проверка поля 'createdOn'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('createdOn');",
							"});",
							"",
							"pm.test(\"Проверка поля 'description'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description', \"Test description test description 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'eventDate'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('eventDate', \"2024-12-31 15:10:05\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'id'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id', 107);",
							"});",
							"",
							"pm.test(\"Проверка объекта 'initiator'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('initiator');",
							"    pm.expect(jsonData.initiator).to.be.an('object');",
							"    pm.expect(jsonData.initiator).to.have.property('id', 138);",
							"    pm.expect(jsonData.initiator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(jsonData.initiator).to.have.property('email', \"test1@test.ru\");",
							"});",
							"",
							"pm.test(\"Проверка объекта 'location'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('location');",
							"    pm.expect(jsonData.location).to.be.an('object');",
							"    pm.expect(jsonData.location).to.have.property('lat', 55.754166);",
							"    pm.expect(jsonData.location).to.have.property('lon', 37.62);",
							"});",
							"",
							"pm.test(\"Проверка поля 'paid'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('paid', true);",
							"});",
							"",
							"pm.test(\"Проверка поля 'participantLimit'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('participantLimit', 10);",
							"});",
							"",
							"pm.test(\"Проверка поля 'publishedOn'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('publishedOn', null);",
							"});",
							"",
							"pm.test(\"Проверка поля 'requestModeration'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('requestModeration', true);",
							"});",
							"",
							"pm.test(\"Проверка поля 'title'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('title', \"Test title 1\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'state'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('state', \"PUBLISHED\");",
							"});",
							"",
							"pm.test(\"Проверка поля 'views'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('views', 0);",
							"});",
							"",
							"pm.test(\"Проверка поля 'comments'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('comments');",
							"    pm.expect(jsonData).to.have.property('comments').that.is.an('array');",
							"",
							"    var secondComment = jsonData.comments[0];",
							"    pm.expect(secondComment).to.have.property('id', 4);",
							"    pm.expect(secondComment).to.have.property('text', \"test сomment 4\");",
							"    pm.expect(secondComment.creator).to.have.property('id', 138);",
							"    pm.expect(secondComment.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(secondComment.creator).to.have.property('email', \"test1@test.ru\");",
							"    pm.expect(secondComment).to.have.property('eventId', 107);",
							"",
							"    var firstComment = jsonData.comments[1];",
							"    pm.expect(firstComment).to.have.property('id', 3);",
							"    pm.expect(firstComment).to.have.property('text', \"test сomment 3\");",
							"    pm.expect(firstComment.creator).to.have.property('id', 138);",
							"    pm.expect(firstComment.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(firstComment.creator).to.have.property('email', \"test1@test.ru\");",
							"    pm.expect(firstComment).to.have.property('eventId', 107);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "107"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get EventList by Admin for user 1 full info with comments correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Ответ должен быть в формате JSON\", function () {",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Проверка общего количества объектов в jsonData\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(2);",
							"});",
							"",
							"pm.test(\"Проверка поля 'comments для event 1'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1].comments).to.be.an('array').that.is.not.empty;",
							"    pm.expect(jsonData[1].comments.length).to.eql(2);",
							"",
							"    var secondComment = jsonData[1].comments[0];",
							"    pm.expect(secondComment).to.have.property('id', 4);",
							"    pm.expect(secondComment).to.have.property('text', \"test сomment 4\");",
							"    pm.expect(secondComment.creator).to.have.property('id', 138);",
							"    pm.expect(secondComment.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(secondComment.creator).to.have.property('email', \"test1@test.ru\");",
							"    pm.expect(secondComment).to.have.property('eventId', 107);",
							"",
							"    var firstComment = jsonData[1].comments[1];",
							"    pm.expect(firstComment).to.have.property('id', 3);",
							"    pm.expect(firstComment).to.have.property('text', \"test сomment 3\");",
							"    pm.expect(firstComment.creator).to.have.property('id', 138);",
							"    pm.expect(firstComment.creator).to.have.property('name', \"Test Name 1\");",
							"    pm.expect(firstComment.creator).to.have.property('email', \"test1@test.ru\");",
							"    pm.expect(firstComment).to.have.property('eventId', 107);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events?users=138",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events"
					],
					"query": [
						{
							"key": "users",
							"value": "138"
						},
						{
                          "key": "users",
                          "value": "2",
							"disabled": true
						},
						{
                          "key": "states",
                          "value": "PUBLISHED",
							"disabled": true
						},
						{
                          "key": "states",
                          "value": "DENIED",
							"disabled": true
						},
						{
                          "key": "rangeStart",
                          "value": "2021-02-25T15:30:00",
							"disabled": true
						},
						{
                          "key": "rangeEnd",
                          "value": "2025-12-25T15:30:00",
							"disabled": true
						},
						{
							"key": "categories",
							"value": "1",
							"disabled": true
						},
						{
							"key": "categories",
							"value": "2",
							"disabled": true
						},
						{
							"key": "from",
							"value": "0",
							"disabled": true
						},
						{
							"key": "size",
							"value": "5",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "categoryId",
			"value": ""
		}
	]
}